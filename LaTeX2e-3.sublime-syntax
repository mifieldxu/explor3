%YAML 1.2
---
name: LaTeX2e/3
file_extensions:
  - tex
  - dtx
  - cls
  - sty
  - ins
scope: text.tex.latex

contexts:
  prototype:
    - include: comments
    - include: hash-parameters
    - include: lengths
    # - include: latex2e--toggle

# prototype contexts

  comments:
    - match: (%+).*$\n?
      scope: comment.line.percentage.tex
      captures:
        1: punctuation.definition.comment.tex

  hash-parameters:
    - match: (#{1,2})(\d+)
      scope: variable.parameter.identifier.tex
      captures:
        1: keyword.operator.parameter.identifier.tex
        2: constant.numeric.integer.tex

  lengths:
    - match: ((-)?[\d]+(?:(\.)\d+)?)(pt|mm|cm|in|ex|em|mu)
      captures:
        1: constant.numeric.decimal.tex
        2: punctuation.numeric.negative.tex
        3: punctuation.numeric.demical-point.tex
        4: keyword.other.unit.tex
    - match: ((-)?[\d]+(?:(\.)\d+)?)(?=\\)
      captures:
        1: constant.numeric.decimal.tex
        2: punctuation.numeric.negative.tex
        3: punctuation.numeric.demical-point.tex

  main:
    - include: latex2e--main


# plain TeX

  tex-plain:
    - include: tex--primitives--macro
    - include: tex--primitives--logic
    - include: tex-constants
    - include: scope:text.tex#catcode
    # - include: scope:text.tex#greeks
    # - include: scope:text.tex#block-math
    # - include: scope:text.tex#inline-math

  tex--primitives--logic:
    - match: |-
        (?x)
        (
          (\\)
          (
            else
            | fi
            | ftrue
            | if
              (
                case
                | cat
                | csname
                | dim
                | eof
                | false
                | hbox
                | hmode
                | inner
                | mmode
                | num
                | odd
                | undefined
                | vbox
                | vmode
                | void
                | x
              )?
          )
        )
        (?![A-Za-z@])
      captures:
        0: support.function.general.boolean.tex
        1: keyword.control.boolean.builtin.tex
        2: punctuation.definition.backslash.tex
    - match: ((\\)if)([A-Za-z@]+)
      captures:
        0: support.function.general.boolean.tex
        1: keyword.control.boolean.custom.tex
        2: punctuation.definition.backslash.tex
        3: variable.parameter.boolean.tex
    - match: (\\)([A-Za-z@]+)(true|false)(?![A-Za-z@])
      captures:
        0: support.function.general.boolean.tex
        1: punctuation.definition.backslash.tex
        2: variable.boolean.tex
        3: constant.language.boolean.tex

  tex--primitives--macro:
    # (e|g|x)def
    - match: |-
        (?x)
        (
          (\\)
          (?:e|g|x)?def
        )\s*
        (?:
          (
            (\\)[A-Za-z@]+
          )\s*
          (?:
            (\#)(\d+)
            | [^\{]
          )*?\s*
          (\{)
        )?
      captures:
        1: support.function.definition.tex storage.modifier.definition.tex
        2: punctuation.definition.backslash.tex
        3: support.function.general.tex entity.name.definition.tex
        4: punctuation.definition.backslash.tex
        5: keyword.operator.parameter.identifier.tex
        6: constant.numeric.integer.tex
        7: punctuation.definition.group.brace.begin.tex
      push:
        - meta_scope: meta.function.definition.tex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.tex
          pop: true
        # - include: tex-constants
        # - include: latex2e--commands-all
        # - include: latex2e--macro-braces
        - include: latex2e--main
    - match: ((\\)let)\s*((\\)[A-Za-z@]+)?
      captures:
        1: support.function.definition.tex storage.modifier.definition.tex
        2: punctuation.definition.backslash.tex
        3: support.function.general.tex entity.name.definition.tex
        4: punctuation.definition.backslash.tex
    - match: (\\)global(?![A-Za-z@])\b
      captures:
        0: support.function.definition.global.tex storage.modifier.definition.global.tex
        1: punctuation.definition.backslash.tex
    - match: (\\)long(?![A-Za-z@])\b
      captures:
        0: support.function.definition.long.tex storage.modifier.definition.long.tex
        1: punctuation.definition.backslash.tex
    - match: (\\)expandafter(?![A-Za-z@])\b
      captures:
        0: support.function.control.expandafter.tex keyword.control.expandafter.tex
        1: punctuation.definition.backslash.tex
    - match: (\\)verb(?![A-Za-z@])\b
      captures:
        0: support.function.verbatim.tex keyword.verbatim.tex
        1: punctuation.definition.backslash.tex
      push:
        - match: '\|'
          scope: punctuation.definition.group.string.verbatim.begin.tex
          push:
            - match: '[^|]+'
              captures:
                0: string.unquoted.verbatim.tex
            - match: '\|'
              scope: punctuation.definition.group.string.verbatim.end.tex
              pop: true
            - match: ''
              pop: true
        - match: ''
          pop: true
    - match: |-
        (?x)
        (?:
          ((\\)csname)
          | (?<=\\ifcsname)
        )\s+
        ([A-Za-z@]+)\s*
        ((\\)endcsname)
        (?![A-Za-z@])\s*
      captures:
        1: support.function.csname.tex keyword.csname.tex
        2: punctuation.definition.backslash.tex
        3: variable.parameter.csname.tex
        4: support.function.endcsname.tex keyword.endcsname.tex
        5: punctuation.definition.backslash.tex

  tex-constants:
    - match: \\\\
      scope: constant.character.newline.tex
    - match: '(\\)[^A-Za-z@]'
      scope: constant.character.escape.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: '&'
      scope: constant.character.ampersand.tex
    - match: '~'
      scope: constant.character.space.non-breaking.tex
    - match: (\\)relax(?![A-Za-z@])\b
      captures:
        0: constant.language.relax.tex
        1: punctuation.definition.backslash.tex
    - match: (\\)undefined(?![A-Za-z@])\b
      captures:
        0: constant.language.undefined.tex
        1: punctuation.definition.backslash.tex
    - match: (\\)space(?![A-Za-z@])\b
      captures:
        0: constant.language.space.tex
        1: punctuation.definition.backslash.tex
    - match: (\\)par(?![A-Za-z@])\b
      captures:
        0: constant.language.par.tex
        1: punctuation.definition.backslash.tex
    - match: (\\)bgroup(?![A-Za-z@])\b
      captures:
        0: constant.language.bgroup.tex
        1: punctuation.definition.backslash.tex
    - match: (\\)egroup(?![A-Za-z@])\b
      captures:
        0: constant.language.egroup.tex
        1: punctuation.definition.backslash.tex
    - match: (\\)begingroup(?![A-Za-z@])\b
      captures:
        0: constant.language.begingroup.tex
        1: punctuation.definition.backslash.tex
    - match: (\\)endgroup(?![A-Za-z@])\b
      captures:
        0: constant.language.endgroup.tex
        1: punctuation.definition.backslash.tex


# LaTeX2e

  expl3-syntax-switch:
    - match: |-
        (?x)
        (?=
          \\ExplSyntaxOn
          | \\ProvidesExpl(?:Class|Package)
        )(?![A-Za-z@])
      push:
        - meta_scope: text.tex.latex.latex3 meta.syntax.expl3.latex
        - match: (\\)ExplSyntaxOn(?![A-Za-z@])
          captures:
            0: support.function.syntax.expl3.on.latex keyword.control.syntax.expl3.on.latex
            2: punctuation.definition.backslash.latex
        - match: |-
            (?x)
            (?:
              ((\\)ExplSyntaxOff)
            )(?![A-Za-z@])
          captures:
            1: support.function.syntax.expl3.off.latex keyword.control.syntax.expl3.off.latex
            2: punctuation.definition.backslash.latex
          pop: true
        - match: |-
            (?x)
            (?=
              \\end\{filecontents\*?\}
            )
          pop: true
        - include: latex3--main

  latex--keyval:
    - match: '[A-Za-z[:digit:]-]*(?=\s*\=)'
      scope: variable.parameter.key.latex
    - match: ([A-Za-z[:digit:]-]*(?!\s*\=))
      scope: variable.parameter.latex
    - match: ','
      scope: punctuation.separator.comma.options.latex
    - match: '='
      scope: punctuation.separator.equals.keyval.latex
      push:
        - match: ([A-Za-z[:digit:]-]*)
          scope: entity.name.parameter.value.latex
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.tex
          push:
            - match: ([A-Za-z[:digit:]-]*\s*)
              scope: entity.name.parameter.value.latex
            - include: latex--keyval
            - include: latex2e--limited
            - match: '\}'
              scope: punctuation.definition.group.brace.end.tex
            - match: ''
              pop: true
        - match: ''
          pop: true

  # main context
  latex2e--main:
    - include: expl3-syntax-switch
    - include: latex2e--preamble
    - include: latex2e--environments-builtin
    - include: latex2e--begin-end-environments
    - include: latex2e--constants-builtin
    - include: latex2e--constants-all
    - include: tex-plain
    - include: latex2e--commands-builtin
    - include: latex2e--packages
    - include: latex2e--commands-all
    - include: latex2e--braces

  # limited context; for use in braces where some macros
  # (e.g., environments) shouldn't be matched
  latex2e--limited:
    - include: latex2e--environments-builtin
    - include: latex2e--begin-end-environments
    - include: latex2e--constants-builtin
    - include: latex2e--constants-all
    - include: tex-plain
    - include: latex2e--commands-builtin
    - include: latex2e--packages
    - include: latex2e--commands-all
    - include: latex2e--macro-braces

  # should be available even in expl3 context
  latex2e--builtin:
    - include: latex2e--preamble
    - include: latex2e--environments-builtin
    - include: latex2e--constants-builtin
    - include: latex2e--commands-builtin

  latex2e--preamble:
  # TeX format
    - match: (\\)(?:NeedsTeXFormat)\b\s*
      captures:
        0: keyword.control.preamble.latex
        1: punctuation.definition.backslash.latex
      push:
        - meta_scope: meta.preamble.load.tex-format.latex
        - include: latex2e--brackets-nolookahead
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          set:
            - meta_scope: meta.preamble.load.tex-format.latex meta.group.brace.latex
            - match: '[A-Za-z[:digit:]-]'
              scope: support.class.tex-format.latex
            - match: '\}(?=\[)'
              scope: punctuation.definition.group.brace.end.latex
              push:
                - match: '(\[)((\d{4})(/)(\d{2})(/)(\d{2}))(\])'
                  captures:
                    1: punctuation.definition.group.bracket.begin.latex
                    2: string.unquoted.date.latex
                    3: constant.numeric.date.year.latex
                    4: punctuation.definition.separator.date.latex
                    5: constant.numeric.date.month.latex
                    6: punctuation.definition.separator.date.latex
                    7: constant.numeric.date.day.latex
                    8: punctuation.definition.group.bracket.end.latex
                - match: ''
                  pop: true
            - match: '(\}(?!\[))?'
              captures:
                1: punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true
  # provides class/package
    - match: (\\)Provides(?:Class|Package)\b\s*
      captures:
        0: keyword.control.preamble.provides.latex
        1: punctuation.definition.backslash.latex
      push:
        - meta_scope: meta.preamble.provides.latex
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          set:
            - meta_scope: meta.preamble.provides.latex meta.group.brace.latex
            - match: '[A-Za-z[:digit:]-]'
              scope: support.class.provides.latex
            - match: '\}(?=\[)'
              scope: punctuation.definition.group.brace.end.latex
              push:
                - match: '(\[)((\d{4})(/)(\d{2})(/)(\d{2})(?:\s+[^\]]*)?)(\])'
                  captures:
                    1: punctuation.definition.group.bracket.begin.latex
                    2: string.unquoted.version.latex
                    3: constant.numeric.date.year.latex
                    4: punctuation.definition.separator.date.latex
                    5: constant.numeric.date.month.latex
                    6: punctuation.definition.separator.date.latex
                    7: constant.numeric.date.day.latex
                    8: punctuation.definition.group.bracket.end.latex
                - match: ''
                  pop: true
            - match: '(\}(?!\[))?'
              captures:
                1 : punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true
  # provides file
    - match: (\\)Provides(?:File)\b\s*
      captures:
        0: keyword.control.preamble.provides.file.latex
        1: punctuation.definition.backslash.latex
      push:
        - meta_scope: meta.preamble.provides.file.latex
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          set:
            - meta_scope: meta.preamble.provides.file.latex meta.group.brace.latex
            - match: '([^}]+)(\.)(\w+)?'
              captures:
                0: string.unquoted.filename.latex
                1: string.quoted.double.filename.latex
                2: punctuation.separator.filename.extension.latex
                3: entity.name.file.extension.latex
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true
  # (Input)IfFileExists
    - match: (\\)(?:Input)?IfFileExists\b\s*
      captures:
        0: keyword.control.preamble.if-file-exists.latex
        1: punctuation.definition.backslash.latex
      push:
        - meta_scope: meta.preamble.if-file-exists.latex
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          push:
            - meta_scope: meta.preamble.if-file-exists.latex meta.group.brace.latex
            - match: '([^}]+)(\.)(\w+)?'
              captures:
                0: string.unquoted.filename.latex
                1: string.quoted.double.filename.latex
                2: punctuation.separator.filename.extension.latex
                3: entity.name.file.extension.latex
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true
  # loading class/package
    - match: (\\)(?:usepackage|documentclass|(?:LoadClass|RequirePackage)(?:WithOptions)?)\b\s*
      captures:
        0: keyword.control.preamble.load.latex
        1: punctuation.definition.backslash.latex
      push:
        - include: latex2e--brackets-nolookahead
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          push:
            - meta_scope: meta.preamble.load.latex meta.group.brace.latex
            - match: '[A-Za-z[:digit:]-]'
              scope: support.class.latex
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true
  # pass options to
    - match: ((\\)PassOptionsTo(?:Class|Package))\b\s*
      captures:
        1: keyword.control.preamble.options.pass-to.latex
        2: punctuation.definition.backslash.latex
      push:
        - meta_scope: meta.preamble.options.pass-to.latex
        - include: latex2e--braces-nolookahead-keyval
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          push:
            - match: '(\})(\{)'
              captures:
                1: punctuation.definition.group.brace.end.latex
                2: punctuation.definition.group.brace.begin.latex
              push:
                - meta_scope: meta.preamble.options.pass-to.latex meta.group.brace.latex
                - match: '[A-Za-z[:digit:]-]'
                  scope: support.class.latex
                - match: '\}'
                  scope: punctuation.definition.group.brace.end.latex
                  pop: true
            - match: '\}(?!\{)'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
            - include: latex--keyval
            - include: latex2e--commands-builtin
            - include: latex2e--commands-all
            - match: ''
              pop: true
        - match: ''
          pop: true
  # \CurrentOption
    - match: (\\)CurrentOption\b\s*
      captures:
        0: variable.language.option.current.latex keyword.control.preamble.option.current.latex
        1: punctuation.definition.backslash.latex
  # \OptionNotUsed
    - match: (\\)OptionNotUsed\b\s*
      captures:
        0: keyword.control.preamble.option.unused.latex
        1: punctuation.definition.backslash.latex
  # \DeclareOption*
    - match: (\\)DeclareOption\*
      captures:
        0: keyword.control.preamble.option.declaration.star.latex
        1: punctuation.definition.backslash.latex
      push:
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          push:
            - include: latex2e--main
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true
  # \DeclareOption
    - match: (\\)DeclareOption\b\s*
      captures:
        0: keyword.control.preamble.option.declaration.latex
        1: punctuation.definition.backslash.latex
      push:
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          push:
            - match: '[A-Za-z[:digit:]-]*'
              scope: entity.name.parameter.value.latex
            - include: latex2e--after-brace
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true
  # \ExecuteOptions
    - match: (\\)ExecuteOptions\b\s*
      captures:
        0: keyword.control.preamble.option.execution.latex
        1: punctuation.definition.backslash.latex
      push:
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          push:
            - match: '[A-Za-z[:digit:]-]*'
              scope: entity.name.parameter.value.latex
            - match: ','
              scope: punctuation.separator.comma.options.latex
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true
  # \ProcessOptions(*)
    - match: (\\)ProcessOptions\b\*?\s*
      captures:
        0: variable.language.option.process.latex keyword.control.preamble.option.process.latex
        1: punctuation.definition.backslash.latex
  # AtBegin / AtEnd
    - match: |-
        (?x)
        (\\)
        (?:
          AtBegin(?:Document|Dvi)
          | AtEndOf(?:Class|Package)
        )\b\s*
      captures:
        0: keyword.control.preamble.insert.latex
        1: punctuation.definition.backslash.latex
      push:
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          push:
            - include: latex2e--main
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true
  # messages: error, warning, info
    - match: |-
        (?x)
        (\\)
        (?:
          (?:Class|Package)(?:Error|Warning|Info)(?:NoLine)?
        )
        \b\s*
      captures:
        0: keyword.control.preamble.message.latex
        1: punctuation.definition.backslash.latex
      push:
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          push:
            - meta_scope: meta.preamble.documentclass.latex meta.group.brace.latex
            - match: '[A-Za-z[:digit:]-]'
              scope: support.class.latex
            - include: latex2e--brace-after-brace
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true
  # importing files: include(only), input, includegraphics, addbibresource
    - match: '((\\)(?:include(?:only)?|input|includegraphics|addbibresource))(\{)'
      scope: meta.function.import.latex
      captures:
        1: keyword.control.import.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.import.latex
        - match: (?=")
          push:
            - match: '(")(.+(\.)(\w+)?)(")'
              captures:
                1: punctuation.definition.string.begin.ts
                2: string.quoted.double.filename.latex
                3: punctuation.separator.filename.extension.latex
                4: entity.name.file.extension.latex
                5: punctuation.definition.string.end.ts
            - match: ''
              pop: true
        - match: (?!\})
          push:
            - match: '([^}]+)(\.)(\w+)?'
              captures:
                0: string.unquoted.filename.latex
                1: string.quoted.double.filename.latex
                2: punctuation.separator.filename.extension.latex
                3: entity.name.file.extension.latex
            - match: ''
              pop: true
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true

  latex2e--braces:
    - match: '\{'
      scope: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.group.brace.latex
        - include: latex2e--after-brace
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: latex2e--main
        - include: hash-parameters

  # used in macros to prevent matching of \begin{env}...\end{env}
  latex2e--macro-braces:
    - match: '\{'
      scope: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.group.brace.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: latex2e--limited

  latex2e--brackets-nolookahead:
    - match: '\['
      scope: punctuation.definition.group.bracket.begin.latex
      push:
        - meta_scope: meta.group.bracket.latex
        - match: '\]'
          scope: punctuation.definition.group.bracket.end.latex
          pop: true
        # - include: latex2e--constants-all
        # - include: latex2e--commands-all
        # - include: latex2e--braces
        - include: latex2e--main
        - include: latex--keyval

  latex2e--brackets:
    - match: '\['
      scope: punctuation.definition.group.bracket.begin.latex
      push:
        - meta_scope: meta.group.bracket.latex
        - include: latex2e--after-bracket
        - match: '\]'
          scope: punctuation.definition.group.bracket.end.latex
          pop: true
        # - include: latex2e--constants-all
        # - include: latex2e--commands-all
        # - include: latex2e--braces
        - include: latex2e--main
        - include: latex--keyval

  latex2e--parentheses:
    - match: '\('
      scope: punctuation.definition.group.parenthesis.begin.latex
      push:
        - meta_scope: meta.group.parenthesis.latex
        - include: latex2e--after-parenthesis
        - match: '\)'
          scope: punctuation.definition.group.parenthesis.end.latex
          pop: true
        - include: latex2e--main
        - include: latex--keyval

  latex2e--after-brace:
    - include: latex2e--brace-after-brace
    - include: latex2e--bracket-after-brace
    - include: latex2e--parenthesis-after-brace

  latex2e--brace-after-brace:
    - match: '\}(?=\s*\{)'
      scope: punctuation.definition.group.bracket.end.latex
      set:
        - include: latex2e--braces
        - match: ''
          pop: true

  latex2e--bracket-after-brace:
    - match: '\}(?=\s*\[)'
      scope: punctuation.definition.group.bracket.end.latex
      set:
        - include: latex2e--brackets
        - match: ''
          pop: true

  latex2e--parenthesis-after-brace:
    - match: '\}(?=\s*\()'
      scope: punctuation.definition.group.parenthesis.end.latex
      set:
        - include: latex2e--parentheses
        - match: ''
          pop: true

  latex2e--after-bracket:
    - include: latex2e--brace-after-bracket
    - include: latex2e--bracket-after-bracket
    - include: latex2e--parenthesis-after-bracket

  latex2e--brace-after-bracket:
    - match: '\](?=\s*\{)'
      scope: punctuation.definition.group.brace.end.latex
      set:
        - include: latex2e--braces
        - match: ''
          pop: true

  latex2e--bracket-after-bracket:
    - match: '\](?=\s*\[)'
      scope: punctuation.definition.group.bracket.end.latex
      set:
        - include: latex2e--brackets
        - match: ''
          pop: true

  latex2e--parenthesis-after-bracket:
    - match: '\](?=\s*\()'
      scope: punctuation.definition.group.parenthesis.end.latex
      set:
        - include: latex2e--parentheses
        - match: ''
          pop: true

  latex2e--after-parenthesis:
    - include: latex2e--brace-after-parenthesis
    - include: latex2e--bracket-after-parenthesis
    - include: latex2e--parenthesis-after-parenthesis

  latex2e--brace-after-parenthesis:
    - match: '\)(?=\s*\{)'
      scope: punctuation.definition.group.brace.end.latex
      set:
        - include: latex2e--braces
        - match: ''
          pop: true

  latex2e--bracket-after-parenthesis:
    - match: '\)(?=\s*\[)'
      scope: punctuation.definition.group.bracket.end.latex
      set:
        - include: latex2e--brackets
        - match: ''
          pop: true

  latex2e--parenthesis-after-parenthesis:
    - match: '\)(?=\s*\()'
      scope: punctuation.definition.group.parenthesis.end.latex
      set:
        - include: latex2e--parentheses
        - match: ''
          pop: true

  latex2e--argument-brace:
    - meta_scope: meta.group.brace.latex
    - match: '\}'
      scope: punctuation.definition.group.brace.end.latex
      pop: true
    - include: latex2e--main

  latex2e--argument:
    - match: '\{'
      scope: punctuation.definition.group.brace.begin.latex
      set: latex2e--argument-brace
    - match: '(?=\S)'
      pop: true

  latex2e--optional-arguments:
    - include: latex2e--brackets
    - match: '(?=\S)'
      pop: true

  latex2e--constants-builtin:
    - match: (\\)@empty(?![A-Za-z@])\s*
      scope: constant.language.@empty.latex

  latex2e--constants-all:
    - include: tex-constants

  latex2e--commands-builtin:
  # (re)new/provide command/robustcmd
    - include: scope:text.tex#macros
    - match: |-
        (?x)
        (
          (\\)
          (?:
            (?:
              (?:re)?new
              | provide
            )(?:
              command
              | robustcmd
            )
            |(?:
              DeclareRobust
              | Check
            )Command
          )
          \*?
        )
        (?:
          (\{)(\\[A-Za-z@]+)(\})
          | (\\[A-Za-z@]+)
        )
      captures:
        1: support.function.command.assignment.latex storage.modifier.command.assignment.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: support.function.latex entity.name.command.assignment.latex
        5: punctuation.definition.group.brace.end.latex
        6: support.function.latex entity.name.command.assignment.latex
      push:
        - meta_scope: meta.function.command.assignment.latex
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          push:
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
            - include: latex2e--main
            - include: latex2e--constants-all
            - include: latex2e--macro-braces
        - match: '\['
          scope: punctuation.definition.group.bracket.begin.latex
          push:
            - match: \d+
              scope: constant.numeric.integer.parameter-count.latex
            - match: '(\])\s*(?=\[)'
              captures:
                1: punctuation.definition.group.bracket.end.latex
                # 2: punctuation.definition.group.bracket.begin.latex
              push:
                - match: '\['
                  scope: punctuation.definition.group.bracket.begin.latex
                  push:
                    - match: '\]'
                      scope: punctuation.definition.group.bracket.end.latex
                      pop: true
                    - include: latex2e--limited
                - match: ''
                  pop: true
            - match: '(?:\](?!\[))?'
              scope: punctuation.definition.group.bracket.end.latex
              pop: true
        - match: ''
          pop: true
  # \DeclareMathOperator
    - match: |-
        (?x)
        (
          (\\)
          DeclareMathOperator\*?
        )
        (?:
          (\{)(\\[A-Za-z@]+)(\})
          | (\\[A-Za-z@])+
        )
        (?:(\[)(?:[^\]]*)(\]))?
        (\{)
      captures:
        1: support.function.declare-math-operator.latex storage.modifier.declare-math-operator.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: support.function.latex entity.name.declare-math-operator.latex
        5: punctuation.definition.group.brace.end.latex
        6: support.function.latex
        7: punctuation.definition.group.bracket.begin.latex
        8: punctuation.definition.group.bracket.end.latex
        9: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.declare-math-operator.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: latex2e--constants-all
        - include: latex2e--commands-all
        - include: latex2e--macro-braces
  # boxes
    - match: '((\\)[hvmf]box)\s*(\{)'
      captures:
        1: support.function.box.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.box.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: latex2e--main
    - match: '((\\)(?:framebox|makebox))\b'
      captures:
        1: support.function.box.latex
        2: punctuation.definition.backslash.latex
      push:
        - [{meta_scope: meta.function.box.latex}, {match: '', pop: true}]
        - latex2e--argument
        - latex2e--optional-arguments
    - match: '((\\)parbox)\b'
      captures:
        1: support.function.box.latex
        2: punctuation.definition.backslash.latex
      push:
        - [{meta_scope: meta.function.box.latex}, {match: '', pop: true}]
        - latex2e--argument
        - latex2e--argument
        - latex2e--optional-arguments
    - match: '((\\)raisebox)\b'
      captures:
        1: support.function.box.latex
        2: punctuation.definition.backslash.latex
      push:
        - [{meta_scope: meta.function.box.latex}, {match: '', pop: true}]
        - latex2e--argument
        - latex2e--optional-arguments
  # \makeatletter, \makeatother
    - match: (\\)makeatletter(?![A-Za-z@])\s*
      scope: support.function.makeatletter.latex keyword.control.makeatletter.latex
    - match: (\\)makeatother(?![A-Za-z@])\s*
      scope: support.function.makeatother.latex keyword.control.makeatother.latex
  # \\[]
    - match: |-
        (?x)
        (\\\\)
        (?:
          (\[)
          \s*
          -?
          ([[:digit:]]*)
          \s*
          (\w*)
          \s*
          (\])
        )?
      captures:
        1: constant.character.newline.latex
        2: punctuation.definition.group.bracket.begin.newline.latex
        3: constant.numeric.newline.latex
        4: keyword.other.newline.latex
        5: punctuation.definition.group.bracket.begin.newline.latex

  latex2e--environments-builtin:
  # filecontents(*)
    - match: |-
        (?x)
        ((\\)begin)
        (\{)\s*
          (filecontents\*?)
        \s*(\})\s*
        (?:
          (\{)\s*
            (([^}]+)(\.)(\w+)?)
          \s*(\})
        )?
      captures:
        1: support.function.begin.latex keyword.control.flow.begin.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex
        6: punctuation.definition.group.brace.begin.latex
        7: string.unquoted.filename.latex
        8: string.quoted.double.filename.latex
        9: punctuation.separator.filename.extension.latex
        10: entity.name.file.extension.latex
        11: punctuation.definition.group.brace.end.latex
      push:
        - meta_scope: meta.environment.filecontents.latex
        - match: |-
            (?x)
            ((\\)end)
            (\{)\s*
              (filecontents\*?)
            \s*(\})
          captures:
            1: support.function.end.latex keyword.control.flow.end.latex
            2: punctuation.definition.backslash.latex
            3: punctuation.definition.group.brace.begin.latex
            4: variable.parameter.function.latex
            5: punctuation.definition.group.brace.end.latex
          pop: true
        - include: latex2e--main



  latex2e--begin-end-environments:
    - match: '((\\)begin)(\{)\s*(\w*)\*?\s*(\})'
      captures:
        1: support.function.begin.latex keyword.control.flow.begin.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex
      push:
        - include: general-optional-arguments
        - match: ''
          pop: true
    - match: '((\\)end)(\{)\s*(\w*)\*?\s*(\})'
      captures:
        1: support.function.end.latex keyword.control.flow.end.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex

  # this should match all and only those
  # that are valid commands in LaTeX2e
  latex2e--commands-all:
    - match: |-
        (?x)
        (\\)
        (?:
          @[A-Za-z@]+
          | [A-Za-z@]+@[A-Za-z@]+
          | [A-Za-z@]+@
        )
        \*?
      scope: support.function.general.at-letter.latex
      captures:
        1: punctuation.definition.backslash.latex
    - match: (\\)[A-Za-z]+\*?
      scope: support.function.document.latex
      captures:
        1: punctuation.definition.backslash.latex

  latex2e--packages:
    - include: expex
    - include: hyperref
    - include: natbib

  expex:
    - match: (\\)lingset(?![A-Za-z@])\s*
      captures:
        0: support.function.general.package.expex.latex
        1: punctuation.definition.backslash.tex
      push:
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          push:
            - include: latex--keyval
            - match: '\}'
              pop: true
        - match: ''
          pop: true
    - include: scope:meta.environment.expex.gl.latex

  hyperref:
    - match: (\\)hypersetup(?![A-Za-z@])\s*
      captures:
        0: support.function.general.package.hyperref.latex
        1: punctuation.definition.backslash.tex
      push:
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          push:
            - include: latex--keyval
            - match: '\}'
              pop: true
        - match: ''
          pop: true

  natbib:
    - match: (\\)setcitestyle(?![A-Za-z@])\s*
      captures:
        0: support.function.general.package.natabib.latex
        1: punctuation.definition.backslash.tex
      push:
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          push:
            - include: latex--keyval
            - match: '\}'
              pop: true
        - match: ''
          pop: true


# LaTeX3 / expl3 syntax

  latex3--main:
    - include: latex3--preamble
    - include: latex3--tex-primitives-renamed
    - include: latex3--constants-builtin
    - include: latex3--constants-general
    - include: latex3--functions-builtin
    - include: latex3--functions-general
    - include: latex2e--builtin
    - include: latex3--commands-all
    - include: latex3--braces
    - include: tex-plain

  latex3--braces:
    - match: '\{'
      scope: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.group.brace.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: latex3--main
        - include: hash-parameters

  latex3--preamble:
  # \ProvidesExpl(Class,Package)
    - match: (\\)(?:ProvidesExpl(?:Class|Package))\b\s*
      captures:
        0: keyword.control.preamble.provides.latex.latex3
        1: punctuation.definition.backslash.latex
      push:
        - meta_scope: meta.preamble.provides.latex.latex3
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          set:
            - meta_scope: meta.group.brace.latex
            - include: latex2e--commands-all
            - match: '[A-Za-z[:digit:]-]'
              scope: support.class.latex.latex3
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true
  # \ProcessKeys(Package)Options
    - match: (\\)(?:ProcessKeys(?:Package)?Options)\b\s*
      captures:
        0: keyword.control.preamble.process-options.latex.latex3
        1: punctuation.definition.backslash.latex
      push:
        - meta_scope: meta.preamble.process-options.latex.latex3
        - include: latex2e--brackets
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          set:
            - meta_scope: meta.preamble.process-options.latex.latex3 meta.group.brace.latex
            - include: latex2e--commands-all
            - match: '[A-Za-z[:digit:]-]'
              scope: support.class.latex
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true

  # LaTeX3 renames tex primitives to \tex_<name>:D
  latex3--tex-primitives-renamed:
    - match: |-
        (?x)
        (\\)
        tex_([A-Za-z@]+):D
        (?![A-Za-z@])
      scope: support.function.primitive.latex.latex3
      captures:
        1: punctuation.definition.backslash.latex

  latex3--constants-builtin:
  # bool
    - match: |-
        (?x)
        (\\)
        (?:
          c_true_bool
        )
        (?![A-Za-z@_:])
      scope: constant.language.boolean.true.latex.latex3
    - match: |-
        (?x)
        (\\)
        (?:
          c_false_bool
        )
        (?![A-Za-z@_:])
      scope: constant.language.boolean.false.latex.latex3
  # str
    - match: |-
        (?x)
        (\\)
        (?:
          c_(?:
            ampersand
            | atsign
            | backslash
            | left_brace
            | right_brace
            | circumflex
            | colon
            | dollar
            | hash
            | percent
            | tilde
            | underscore
          )_str
        )
        (?![A-Za-z@_:])
      scope: constant.language.string.character.latex.latex3
  # seq
    - match: |-
        (?x)
        (\\)
        (?:
          c_(?:
            empty
          )_seq
        )
        (?![A-Za-z@_:])
      scope: constant.language.sequence.latex.latex3
  # int
    - match: |-
        (?x)
        (\\)
        (?:
          c_(?:
          zero
          | one
          | max
          | max_register
          | max_char
          )_int
        )
        (?![A-Za-z@_:])
      scope: constant.language.integer.latex.latex3
  # sys
    - match: |-
        (?x)
        (\\)
        (?:
          c_sys_(?:
            (?:
              minute
              | hour
              | day
              | month
              | year
              | shell_escape
            )_int
            |(?:
              jobname
              | engine(?:_version)?
              | output
              | platform
              | backend
            )_str
          )
        )
        (?![A-Za-z@_:])
      scope: constant.language.system.latex.latex3
  # clist
    - match: |-
        (?x)
        (\\)
        (?:
          c_(?:
            empty
          )_clist
        )
        (?![A-Za-z@_:])
      scope: constant.language.comma-list.latex.latex3
  # token
    - match: |-
        (?x)
        (\\)
        (?:
          c_(?:
            (?:
              empty
              | novalue
              | space
              | catcode_(?:
                other_space
                | active(?:_space)?
              )
            )_tl
            |(?:
              (?:
                group_(?:begin|end)
                | math_toggle
                | alignment
                | parameter
                | math_su(?:b|per)script
                | space
                | catcode_(?:lett|oth)er
              )_token
            )
          )
        )
        (?![A-Za-z@_:])
      scope: constant.language.token.latex.latex3
  # prop
    - match: |-
        (?x)
        (\\)
        (?:
          c_(?:
            empty
          )_prop
        )
        (?![A-Za-z@_:])
      scope: constant.language.property.latex.latex3
  # io
    - match: |-
        (?x)
        (\\)
        (?:
          c_(?:
            (?:log|term)_iow
            | (?:)_ior
          )
        )
        (?![A-Za-z@_:])
      scope: constant.language.io.latex.latex3
  # dim
    - match: |-
        (?x)
        (\\)
        (?:
          c_(?:max|zero)
          _(?:
            dim|(?:mu)?skip)
          )
        (?![A-Za-z@_:])
      scope: constant.language.dimension.latex.latex3
  # fp
    - match: |-
        (?x)
        (\\)
        (?:
          c_(?:
            (?:minus_)?(?:zero|inf)
            | one(?:_degree)?
            | e
            | pi
            | nan
          )_fp
        )
        (?![A-Za-z@_:])
      scope: constant.language.floating-point.latex.expl
  # box
    - match: |-
        (?x)
        (\\)
        (?:
          c_(?:
            empty
          )_box
        )
        (?![A-Za-z@_:])
      scope: constant.language.box.latex.latex3
  # coffin
    - match: |-
        (?x)
        (\\)
        (?:
          c_(?:
            empty
          )_coffin
        )
        (?![A-Za-z@_:])
      scope: constant.language.coffin.latex.latex3

  latex3--constants-general:
    - match: '(\\)c_([A-Za-z@_]+)'
      scope: constant.other.latex.latex3

  latex3--functions-builtin:
  # \cs_new(_<>):N/c*
    - match: |-
        (?x)
        (
          (\\)
          cs_new
          (?:_protected)?
          (?:_nopar)?
          (:)
          ([Nc]p?[nx])
        )
        \s*
      scope: meta.new.expr.latex.latex3
      captures:
        1: storage.type.function.latex.latex3 meta.function-call.latex.latex3
        2: punctuation.definition.backslash.latex
        3: keyword.operator.parameter-specifier.latex.latex3
        4: variable.parameter.latex.latex3
      push:
        - meta_scope: meta.function.declaration.latex.latex3
        - match: |-
            (?x)
            (
              (\{)\s*
                (?:
                  [A-Za-z@_]+(_p(:))
                  | [A-Za-z@_]+(:)([NncVvoxefTFpwD]+)
                  | [A-Za-z@]+
                  | [A-Za-z@_:]+
                )
              \s*(\})
              | (\\)
                (?:
                  [A-Za-z@_]+(_p(:))
                  | [A-Za-z@_]+(:)([NncVvoxefTFpwD]+)
                  | [A-Za-z@]+
                  | [A-Za-z@_:]+
                )
            )(?!
              [A-Za-z@_:]
            )
            \s*
          captures:
            1: entity.name.function.latex.latex3
            2: punctuation.definition.group.brace.csname.begin.latex.latex3
            3: variable.parameter.p.latex.latex3
            4: keyword.operator.parameter-specifier.latex.latex3
            5: keyword.operator.parameter-specifier.latex.latex3
            6: variable.parameter.latex.latex3
            7: punctuation.definition.group.brace.csname.end.latex.latex3
            8: punctuation.definition.backslash.latex
            9: variable.parameter.p.latex.latex3
            10: keyword.operator.parameter-specifier.latex.latex3
            11: keyword.operator.parameter-specifier.latex.latex3
            12: variable.parameter.latex.latex3
        - match: '(?=#\d+)'
          push:
            - include: hash-parameters
            - match: ''
              pop: true
        - match: ''
          pop: true
  # \seq_new(_<>):N/c
    - match: |-
        (?x)
        (
          (\\)
          seq_new
          (:)
          ([Nc])
        )
        \s*
      scope: meta.new.expr.latex.latex3
      captures:
        1: storage.type.seq.latex.latex3
        2: punctuation.definition.backslash.latex
        3: keyword.operator.parameter-specifier.latex.latex3
        4: variable.parameter.latex.latex3
      push:
        - meta_scope: meta.definition.variable.latex.latex3
        - match: |-
            (?x)
            (
              (\{)\s*
                [A-Za-z@_]+
              \s*(\})
              | (\\)
                [A-Za-z@_]+
            )(?!
              [A-Za-z@_:]
            )
            \s*
          captures:
            1: variable.other.seq.latex.latex3 support.function.csname.latex.latex3 entity.name.seq.latex.latex3
            2: punctuation.definition.group.brace.csname.begin.latex.latex3
            3: punctuation.definition.group.brace.csname.end.latex.latex3
            4: punctuation.definition.backslash.latex
        - match: ''
          pop: true


  # this should match all *functions* that can be used
  # by people not on the kernel team
  # i.e., this should follow the LaTeX3 function naming convention
  latex3--functions-general:
    - match: |-
        (?x)
        (\\)
        ([A-Za-z@_]+)
        (?:
          (_p(:))
          |(?:
            (:)
            ([NncVvoxefTFpwD]+)
            \b
          )
        )
      scope: support.function.general.latex.latex3
      captures:
        0: meta.function-call.latex.latex3
        1: punctuation.definition.backslash.latex
        # 2: entity.name.function.latex.latex3
        3: variable.parameter.p.latex.latex3
        4: keyword.operator.parameter-specifier.latex.latex3
        5: keyword.operator.parameter-specifier.latex.latex3
        6: variable.parameter.latex.latex3

  # this should match *all* possible commands in LaTeX3
  latex3--commands-all:
    - match: (\\)([A-Za-z*@_:]+)
      scope: support.function.csname.latex.latex3

